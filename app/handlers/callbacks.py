import time
import json
import requests

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from urllib.parse import urlparse

from app.config.config import load_config
from app.utils.keyboards import get_link_info_keyboard, get_pay_button_keyboard, get_payment_keyboard
from app.utils.functions import generate_sign, get_status
from app.states.pinMessage import PinMessage


async def call_cancel(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer('–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
    await state.finish()
    await call.answer()

    
async def how_get_link(call: types.CallbackQuery):
    await call.message.answer('–ó–∞–π–¥–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É -> –Ω–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ -> –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É" -> –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ —Å—é–¥–∞ –±–æ—Ç—Éü¶∏')
    await call.answer()


async def enter_link(call: types.CallbackQuery):
    await call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ <a href="t.me/dubai_profi">–≥—Ä—É–ø–ø—ã</a>', reply_markup=get_link_info_keyboard(), parse_mode='html')
    await PinMessage.waiting_for_message.set()
    await call.answer()


async def pin_message(message: types.Message, state: FSMContext):
    directories = urlparse(message.text).path.strip('/').split('/')
    if len(directories) < 2:
        await message.answer('–≠—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç –≤ –≥—Ä—É–ø–ø–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return
    if directories[-2] != 'dubai_profi':
        await message.answer('–≠—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç –≤ –≥—Ä—É–ø–ø–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return
    await message.answer('–•–æ—Ä–æ—à–æ! –°—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: 300—Ä—É–±.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ', reply_markup=get_payment_keyboard())
    await state.update_data(message_id=directories[-1])
    await PinMessage.next()


async def pin_method(call: types.CallbackQuery, state: FSMContext):
    data = {
        'shopId': 21154,
        'nonce': int(time.time()*1000),
        'email': 'email@mail.ru',
        'ip': '85.8.8.8',
        'amount': 300,
        'currency': 'RUB'
    }
    action = call.data.split('_')[1]
    data['i'] = 36 if action == 'card' else 6
    res = requests.post(
        'https://api.freekassa.ru/v1/orders/create', 
        json=generate_sign(load_config().fkassa.token, data)
    )
    res = json.loads(res.text)
    link = res['location']
    await call.message.answer(
        f'–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ', 
        parse_mode='html', 
        reply_markup=get_pay_button_keyboard(link)
    )
    
    get_status(res['orderId'])
    
    await call.answer()
    await state.finish()


def register_callback_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(call_cancel, text='cancel', state='*')
    dp.register_callback_query_handler(how_get_link, text='how_get_link', state='*')
    dp.register_callback_query_handler(enter_link, text='pay', state='*')
    dp.register_message_handler(pin_message, state=PinMessage.waiting_for_message)
    dp.register_callback_query_handler(pin_method, Text(startswith='method_'), state=PinMessage.waiting_for_method)


# @dp.message_handler(state=PinMessage.waiting_for_payment)
# async def pin_payment(message: types.Message, state: FSMContext):
#     await state.finish()
#     await message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤')

